rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if page is published and paid (public access)
    function isPublicPage() {
      return resource != null 
        && resource.data != null
        && resource.data.published == true 
        && resource.data.paymentStatus == "paid";
    }

    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // GLOBAL ACCESS: Allow listing users for public page search
      // This is necessary for finding published pages across all users
      // Only basic user document access - no sensitive data exposure
      allow read: if true;
      
      // Users can create their own data
      allow create: if isOwner(userId);
      
      // Users can update their own data
      allow update: if isOwner(userId);
      
      // Users cannot delete their account data (for safety)
      allow delete: if false;
      
      // ========================================
      // USER'S PAGES SUBCOLLECTION
      // ========================================
      match /pages/{pageId} {
        // Owner can read all their pages
        allow read: if isOwner(userId);
        
        // GLOBAL PUBLIC ACCESS: Anyone can read published and paid pages
        // This is essential for both slug and pageId public access
        allow read: if isPublicPage();
        
        // SERVER API ACCESS: Allow reading any page for server operations
        // This is needed for Stripe webhook and payment processing
        allow read: if true;
        
        // Owner can create pages
        allow create: if isOwner(userId);
        
        // Owner can update their pages
        allow update: if isOwner(userId);
        
        // SERVER API ACCESS: Allow updating pages for payment processing
        // This is needed for marking pages as paid after successful payment
        allow update: if true;
        
        // Owner can delete their own unpublished pages only
        allow delete: if isOwner(userId) 
          && resource != null 
          && resource.data != null
          && resource.data.published == false;
      }
      
      // ========================================
      // USER'S QR CODES SUBCOLLECTION
      // ========================================
      match /qrcodes/{pageId} {
        // Owner can read all their QR codes
        allow read: if isOwner(userId);
        
        // Owner can create QR codes for their published pages
        allow create: if isOwner(userId);
        
        // Owner can update their QR codes
        allow update: if isOwner(userId);
        
        // Owner can delete their QR codes
        allow delete: if isOwner(userId);
      }
      
      // ========================================
      // USER'S SPOTIFY MUSIC SUBCOLLECTION
      // ========================================
      match /spotify-music/{musicId} {
        // Owner can read all their Spotify music metadata
        allow read: if isOwner(userId);
        
        // Owner can create Spotify music metadata
        allow create: if isOwner(userId);
        
        // Owner can update their Spotify music metadata
        allow update: if isOwner(userId);
        
        // Owner can delete their Spotify music metadata
        allow delete: if isOwner(userId);
      }
    }
    
    // ============================================
    // CONFIG COLLECTION (for pricing and settings)
    // ============================================
    match /config/{document} {
      // Anyone can read config (for pricing display)
      allow read: if true;
      
      // Only authenticated users can write (admin functionality)
      allow write: if isAuthenticated();
    }
    
    // ============================================
    // GLOBAL SLUGS COLLECTION (for slug uniqueness)
    // ============================================
    match /globalSlugs/{slug} {
      // Anyone can read to check slug availability
      allow read: if true;
      
      // Only authenticated users can register/unregister slugs
      allow write: if isAuthenticated();
    }
    
    // ============================================
    // ADMIN RULES (Optional - for future admin panel)
    // ============================================
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // ============================================
    // ANALYTICS/LOGS (Optional - for future analytics)
    // ============================================
    match /analytics/{document=**} {
      allow write: if true; // Allow anonymous writes for analytics
      allow read: if request.auth != null;
    }
    
    // ============================================
    // SECURITY: Deny all other access
    // ============================================
    match /{document=**} {
      allow read, write: if false; // Explicitly deny anything not covered above
    }
  }
} 
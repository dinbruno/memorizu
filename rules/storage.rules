rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if file size is within limits (10MB for images, 50MB for videos)
    function isValidFileSize() {
      return request.resource.size < 50 * 1024 * 1024; // 50MB max
    }
    
    // Check if file is an allowed image type
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*') 
        && request.resource.contentType in ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    }
    
    // Check if file is an allowed audio type
    function isValidAudioType() {
      return request.resource.contentType.matches('audio/.*') 
        && request.resource.contentType in ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/aac', 'audio/flac'];
    }
    
    // Check if file is valid media type (image or audio)
    function isValidMediaType() {
      return isValidImageType() || isValidAudioType();
    }
    
    // ============================================
    // USER GALLERY (User's personal gallery - images and audio)
    // ============================================
    match /users/{userId}/{allPaths=**} {
      // Users can read and manage their own gallery and content
      allow read, write, delete: if isOwner(userId);
      
      // Allow write operations with file validation for media files
      allow create, update: if isOwner(userId) 
        && isValidFileSize()
        && (
          !request.resource.exists || // For delete operations
          isValidMediaType() // For write operations
        );
    }
    
    // ============================================
    // THUMBNAILS (Public access for published pages)
    // ============================================
    match /thumbnails/{userId}/{filename} {
      // Anyone can read thumbnails
      allow read: if true;
      
      // Users can upload/update/delete their own thumbnails
      allow write, delete: if isOwner(userId) 
        && (
          !request.resource.exists || // For delete operations
          (isValidImageType() && isValidFileSize()) // For write operations
        );
    }
    
    // ============================================
    // USER UPLOADS (Private user content - all media types)
    // ============================================
    match /uploads/{userId}/{allPaths=**} {
      // Users can manage their own uploads with file validation
      allow read, write, delete: if isOwner(userId) && isValidFileSize();
      
      // Allow write operations with media validation
      allow create, update: if isOwner(userId) 
        && isValidFileSize()
        && (
          !request.resource.exists || // For delete operations
          isValidMediaType() // For write operations
        );
    }
    

    
    // ============================================
    // PAGE ASSETS (Content for published pages)
    // ============================================
    match /pages/{userId}/{pageId}/{allPaths=**} {
      // Users can manage assets for their own pages
      allow read, write, delete: if isOwner(userId) && isValidFileSize();
      
      // Anyone can read page assets (for published pages)
      allow read: if true;
      
      // Allow media files for page assets
      allow create, update: if isOwner(userId) 
        && isValidFileSize()
        && (
          !request.resource.exists || // For delete operations
          isValidMediaType() // For media uploads
        );
    }
    
    // ============================================
    // PUBLIC ASSETS (Global public content)
    // ============================================
    match /public/{allPaths=**} {
      // Anyone can read public assets
      allow read: if true;
      
      // Only authenticated users can write with file validation
      allow write: if isAuthenticated() && isValidFileSize();
      
      // Only authenticated users can delete (admin functionality)
      allow delete: if isAuthenticated();
    }
    
    // ============================================
    // TEMPORARY FILES (Short-term storage)
    // ============================================
    match /temp/{userId}/{allPaths=**} {
      // Users can manage their own temp files
      allow read, write: if isOwner(userId) && isValidFileSize();
      
      // Users can delete their own temp files
      allow delete: if isOwner(userId);
      
      // Allow system cleanup (for automated cleanup processes)
      // This should be done via admin SDK in production
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // ============================================
    // ADMIN FILES (Admin-only access)
    // ============================================
    match /admin/{allPaths=**} {
      // Only admin users can access admin files
      allow read, write, delete: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // ============================================
    // SECURITY: Deny all other access
    // ============================================
    match /{allPaths=**} {
      // Explicitly deny access to any other paths
      allow read, write, delete: if false;
    }
  }
} 